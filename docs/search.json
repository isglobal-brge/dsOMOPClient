[{"path":"/articles/01_object.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"1. Creating an interface object","text":"using dsOMOPClient, recommended basic understanding : OMOP CDM structure standardized clinical data format. can learn OMOP CDM OHDSI Book chapter ‘Common Data Model’. OMOP Vocabularies standardize medical concepts (like diagnoses, medications, procedures) across different coding systems (ICD-9, ICD-10, SNOMED CT, etc.) common representation. OHDSI Book chapter ‘Standardized Vocabularies’ provides comprehensive overview standardization process. Basic DataSHIELD concepts workflow. DataSHIELD Beginner’s Tutorial good starting point. knowledge help better understand effectively query work OMOP CDM data DataSHIELD infrastructure.","code":""},{"path":"/articles/01_object.html","id":"creating-an-interface-object","dir":"Articles","previous_headings":"","what":"1.1 Creating an interface object","title":"1. Creating an interface object","text":"ds.omop function creates interface object allows users interact OMOP CDM database based resource. can use object obtain tables database applying desired filters querying data catalogs information present database. example, using MIMIC IV data available OBiBa’s public Opal demo server. server publicly accessible, users able reproduce examples guide executing commands R session. access credentials : Server URL: https://opal-demo.obiba.org User: dsuser Password: P@ssw0rd Profile: omop First, establish connection demo server using DSI provided credentials: successfully established connection server, create object ds.omop. function requires following parameters: connections: list established DataSHIELD connections. resource: name resource OMOP CDM database DataSHIELD server. server contains database connection resource name mimiciv within omop_demo project. Therefore, need specify , connection established, want take omop_demo.mimiciv resource.","code":"library(DSI) library(DSOpal) library(dsBaseClient) library(dsOMOPClient)  builder <- newDSLoginBuilder() builder$append(   server = \"opal_demo\",   url = \"https://opal-demo.obiba.org\",   user = \"dsuser\",   password = \"P@ssw0rd\",   profile = \"omop\" ) logindata <- builder$build() conns <- datashield.login(logins = logindata) o <- ds.omop(   connections = conns,   resource = \"omop_demo.mimiciv\" )"},{"path":"/articles/01_object.html","id":"establishing-multiple-connections","dir":"Articles","previous_headings":"1.1 Creating an interface object","what":"1.1.1 Establishing multiple connections","title":"1. Creating an interface object","text":"wish establish connections multiple OMOP CDM databases simultaneously connections pool, resource parameter accepts named list parameter name list object corresponds server name, value corresponds resource name. example:","code":"o <- ds.omop(   connections = conns,   resource = list(opal_demo = \"omop_demo.mimiciv\",                   another_server = \"project_name.resource_name\") )"},{"path":"/articles/01_object.html","id":"interface-object-functions","dir":"Articles","previous_headings":"","what":"1.2 Interface object functions","title":"1. Creating an interface object","text":"ds.omop interface object provides several functions interact OMOP CDM database. functions allow users query information database extract tables, transformed integrated DataSHIELD workflow.","code":""},{"path":"/articles/01_object.html","id":"querying-information","dir":"Articles","previous_headings":"1.2 Interface object functions","what":"1.2.1 Querying information","title":"1. Creating an interface object","text":"tables(): function lists available tables OMOP CDM database. allows users understand structure database identify tables might relevant analysis. columns(tableName): Given table name, function returns columns available table. useful users identify specific data fields might want analyze use queries. concepts(tableName): function retrieves concepts present given table returns data frame two columns: concept_id associated concept_name. Concepts OMOP CDM standardized terms represent clinical events, measurements, observations, entities. Understanding concepts available table can help users formulate data filtering queries. numeric values concept_id column standardized identifiers concepts OMOP CDM. example, can observe table , concept 1175625 refers concept Breath rate spontaneous. use identifiers filter data following sections.","code":"o$tables() #> $opal_demo #>  [1] \"attribute_definition\" \"care_site\"            \"cdm_source\"           #>  [4] \"cohort\"               \"cohort_attribute\"     \"cohort_definition\"    #>  [7] \"concept\"              \"concept_relationship\" \"condition_era\"        #> [10] \"condition_occurrence\" \"cost\"                 \"death\"                #> [13] \"device_exposure\"      \"dose_era\"             \"drug_era\"             #> [16] \"drug_exposure\"        \"fact_relationship\"    \"location\"             #> [19] \"measurement\"          \"metadata\"             \"note\"                 #> [22] \"note_nlp\"             \"observation\"          \"observation_period\"   #> [25] \"payer_plan_period\"    \"person\"               \"procedure_occurrence\" #> [28] \"provider\"             \"specimen\"             \"visit_detail\"         #> [31] \"visit_occurrence\"     \"vocabulary\" o$columns(\"measurement\") #> $opal_demo #>  [1] \"measurement_id\"                \"person_id\"                     #>  [3] \"measurement_concept_id\"        \"measurement_date\"              #>  [5] \"measurement_datetime\"          \"measurement_time\"              #>  [7] \"measurement_type_concept_id\"   \"operator_concept_id\"           #>  [9] \"value_as_number\"               \"value_as_concept_id\"           #> [11] \"unit_concept_id\"               \"range_low\"                     #> [13] \"range_high\"                    \"provider_id\"                   #> [15] \"visit_occurrence_id\"           \"visit_detail_id\"               #> [17] \"measurement_source_value\"      \"measurement_source_concept_id\" #> [19] \"unit_source_value\"             \"value_source_value\" o$concepts(\"measurement\") #> $opal_demo #>    concept_id                                         concept_name #> 1           0                                  No matching concept #> 2     1175625                              Breath rate spontaneous #> 3     3000067   Parathyrin.intact [Mass/volume] in Serum or Plasma #> 4     3000068                        oxyCODONE [Presence] in Urine #> 5     3000099    Nuclear Ab [Units/volume] in Serum by Immunoassay #> 6     3000285                       Sodium [Moles/volume] in Blood #> 7     3000330              Specific gravity of Urine by Test strip #> 8     3000348 Leukocyte esterase [Presence] in Urine by Test strip #> 9     3000456   Dacrocytes [Presence] in Blood by Light microscopy #> 10    3000461                  Pressure support setting Ventilator #>  [ reached 'max' / getOption(\"max.print\") -- omitted 343 rows ]"},{"path":"/articles/01_object.html","id":"retrieving-tables","dir":"Articles","previous_headings":"1.2 Interface object functions","what":"1.2.2 Retrieving tables","title":"1. Creating an interface object","text":"get(tableName): function enables users extract specific table OMOP CDM database. extracted table becomes available within DataSHIELD environment, can manipulated using DataSHIELD functions potentially combined tables database. Users flexibility apply filters specify columns customize extracted data according research needs. examples use get function:","code":""},{"path":"/articles/01_object.html","id":"getting-a-complete-table","dir":"Articles","previous_headings":"1.2 Interface object functions > 1.2.2 Retrieving tables","what":"Getting a complete table","title":"1. Creating an interface object","text":"simply specify desired table’s name string get function: However, advised small tables contexts need full table, can memory-intensive slow retrieve. larger tables, recommended apply filters get function retrieve specific subset table.","code":"o$get(\"person\")  # We can use the `ds.summary` function to get a summary of the retrieved table ds.summary(\"person\") #> $opal_demo #> $opal_demo$class #> [1] \"data.frame\" #>  #> $opal_demo$`number of rows` #> [1] 100 #>  #> $opal_demo$`number of columns` #> [1] 11 #>  #> $opal_demo$`variables held` #>  [1] \"person_id\"            \"gender_concept_id\"    \"year_of_birth\"        #>  [4] \"month_of_birth\"       \"day_of_birth\"         \"birth_datetime\"       #>  [7] \"race_concept_id\"      \"ethnicity_concept_id\" \"location_id\"          #> [10] \"provider_id\"          \"care_site_id\""},{"path":"/articles/01_object.html","id":"getting-a-filtered-table","dir":"Articles","previous_headings":"1.2 Interface object functions > 1.2.2 Retrieving tables","what":"Getting a filtered table","title":"1. Creating an interface object","text":"can apply filters get function retrieve specific subset table, recommended approach larger tables, Measurement table. example, can set parameters get function retrieve specific columns (case, value_as_number measurement_date) specific measurement types (case, want use concept IDs Heart rate Body weight, 3027018 3025315): can observe, resulting table contains information measurements Heart rate Body weight patients database. functions form core ds.omop interface object’s capabilities, enables users interact OMOP CDM databases within DataSHIELD environment. expected various resulting tables relationally joined using ds.merge function common identifiers, person_id. next article, explore internal workings table processing operations, understanding manipulate combine tables single datasets ready analysis, along deeper dive customization possibilities get function potential applications.","code":"o$get(table = \"measurement\",       columnFilter = c(\"value_as_number\", \"measurement_date\"),       conceptFilter = c(3027018, 3025315))  # We print a summary of the retrieved table ds.summary(\"measurement\") #> $opal_demo #> $opal_demo$class #> [1] \"data.frame\" #>  #> $opal_demo$`number of rows` #> [1] 100 #>  #> $opal_demo$`number of columns` #> [1] 5 #>  #> $opal_demo$`variables held` #> [1] \"person_id\"                    \"heart_rate.measurement_date\"  #> [3] \"heart_rate.value_as_number\"   \"body_weight.measurement_date\" #> [5] \"body_weight.value_as_number\""},{"path":[]},{"path":"/articles/02_tables.html","id":"table-reshaping","dir":"Articles","previous_headings":"2.1 Features of the get method","what":"2.1.1 Table reshaping","title":"2. Retrieving tables from the database","text":"get method smart method returns table subjecting series operations. detects table can present various records linked OMOP CDM entity (example, Person), transform table wide format automatically using -built DataSHIELD reshape function, ready merged tables. instance, take Person table, return table without altering original format: Whereas take Measurement table, records potentially linkable Person table, return table wide format, preserving column person_id can merged Person table:","code":"o$get(\"person\") ds.summary(\"person\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 100 ##  ## $opal_demo$`number of columns` ## [1] 11 ##  ## $opal_demo$`variables held` ##  [1] \"person_id\"            \"gender_concept_id\"    \"year_of_birth\"        ##  [4] \"month_of_birth\"       \"day_of_birth\"         \"birth_datetime\"       ##  [7] \"race_concept_id\"      \"ethnicity_concept_id\" \"location_id\"          ## [10] \"provider_id\"          \"care_site_id\" # 3027018 is the concept ID for `Heart rate` o$get(table = \"measurement\", conceptFilter = 3027018)  ds.summary(\"measurement\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 100 ##  ## $opal_demo$`number of columns` ## [1] 15 ##  ## $opal_demo$`variables held` ##  [1] \"person_id\"                              ##  [2] \"heart_rate.measurement_id\"              ##  [3] \"heart_rate.measurement_date\"            ##  [4] \"heart_rate.measurement_datetime\"        ##  [5] \"heart_rate.measurement_time\"            ##  [6] \"heart_rate.measurement_type_concept_id\" ##  [7] \"heart_rate.operator_concept_id\"         ##  [8] \"heart_rate.value_as_number\"             ##  [9] \"heart_rate.value_as_concept_id\"         ## [10] \"heart_rate.unit_concept_id\"             ## [11] \"heart_rate.range_low\"                   ## [12] \"heart_rate.range_high\"                  ## [13] \"heart_rate.provider_id\"                 ## [14] \"heart_rate.visit_occurrence_id\"         ## [15] \"heart_rate.visit_detail_id\""},{"path":"/articles/02_tables.html","id":"concept-translation","dir":"Articles","previous_headings":"2.1 Features of the get method","what":"2.1.2 Concept translation","title":"2. Retrieving tables from the database","text":"Another feature may noticed previous example get method automatically translates concepts table retrieving. instance, case Measurement table, concept 3027018 translated Heart rate. happens values rows tables. example, Person table, gender_concept_id column, value 8532 translated automatically FEMALE, value 8507 translated MALE: happen concepts database long recognized properly named Concept table database. Otherwise, concept remain concept_id_ + numeric value concept. example, concept FEMALE properly named Concept table, remain concept_id_8532 can least identified.","code":"ds.summary(\"person$gender_concept_id\") ## $opal_demo ## $opal_demo$class ## [1] \"factor\" ##  ## $opal_demo$length ## [1] 100 ##  ## $opal_demo$categories ## [1] \"female\" \"male\"   ##  ## $opal_demo$`count of 'female'` ## [1] 43 ##  ## $opal_demo$`count of 'male'` ## [1] 57"},{"path":"/articles/02_tables.html","id":"longitudinal-data-sequencing","dir":"Articles","previous_headings":"2.1 Features of the get method","what":"2.1.3 Longitudinal data sequencing","title":"2. Retrieving tables from the database","text":"dealing longitudinal data, multiple records type exist entity time (example, several Heart rate measurements Person), setting wideLongitudinal parameter TRUE get method reshapes longitudinal data entries wide format. transformation appends numerically suffixed columns occurrence, providing comprehensive view data time preserving temporal sequence events measurements entity. Otherwise, wideLongitudinal set FALSE (default), data remains long format without numerically suffixed columns, identifier entity repeated across multiple records type entity support format. method additional data columns aggregated left discretion researcher. degree flexibility ensures data can structured way best suits analysis performed.","code":"o$get(table = \"measurement\",        conceptFilter = 3027018,        columnFilter = \"value_as_number\",        wideLongitudinal = TRUE)  ds.summary(\"measurement\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 100 ##  ## $opal_demo$`number of columns` ## [1] 4550 ##  ## $opal_demo$`variables held` ##  [1] \"person_id\"                    \"heart_rate.1.value_as_number\" ##  [3] \"heart_rate.2.value_as_number\" \"heart_rate.3.value_as_number\" ##  [5] \"heart_rate.4.value_as_number\" \"heart_rate.5.value_as_number\" ##  [7] \"heart_rate.6.value_as_number\" \"heart_rate.7.value_as_number\" ##  [9] \"heart_rate.8.value_as_number\" \"heart_rate.9.value_as_number\" ##  [ reached getOption(\"max.print\") -- omitted 4540 entries ]"},{"path":"/articles/02_tables.html","id":"using-the-get-method","dir":"Articles","previous_headings":"","what":"2.2 Using the get method","title":"2. Retrieving tables from the database","text":"get method several arguments allow customization data retrieved. arguments : table: name table retrieved. symbol: name symbol used store table server’s R environment. specified, table stored symbol name table. conceptFilter: numeric vector concept IDs retrieved. can also single numeric value. columnFilter: character vector names columns retrieved. can also single character value. personFilter: name another symbol server’s R environment contains person IDs retrieved current get operation. specified, existing person IDs retrieved. mergeColumn: name column used merge table another table. specified, person_id column used default merge column. dropNA: logical value indicating whether empty columns automatically filtered table. default value TRUE. Note table parameter mandatory retrieving table. However, highly recommended utilize available data filtering parameters, can significantly enhance performance operations ensure relevant data study selected.","code":""},{"path":"/articles/02_tables.html","id":"applying-basic-filters","dir":"Articles","previous_headings":"2.2 Using the get method","what":"2.2.1 Applying basic filters","title":"2. Retrieving tables from the database","text":"part quite straightforward. use tables() command know tables can take, columns() know columns available, concepts() understand concepts present entities table select wish work . identified specific data interested analyzing, can apply columnFilter conceptFilter parameters retrieve desired table. Let’s proceed example. check available tables: Let’s say want retrieve measurements Measurement table. can use concepts() command see concepts available table: decided retrieve information related concept 3010421 (corresponds pH blood). don’t want retrieve columns table, can use columns() command see columns available Measurement table: interested measurement_date value_as_number Measurement table related concept ID 3010421. can use get method retrieve information: Now information ready used within DataSHIELD environment analysis data manipulation operations want perform. next chapter, see use built-functions DataSHIELD’s dsBaseClient package combine tables.","code":"o$tables() ## $opal_demo ##  [1] \"attribute_definition\" \"care_site\"            \"cdm_source\"           ##  [4] \"cohort\"               \"cohort_attribute\"     \"cohort_definition\"    ##  [7] \"concept\"              \"concept_relationship\" \"condition_era\"        ## [10] \"condition_occurrence\" \"cost\"                 \"death\"                ## [13] \"device_exposure\"      \"dose_era\"             \"drug_era\"             ## [16] \"drug_exposure\"        \"fact_relationship\"    \"location\"             ## [19] \"measurement\"          \"metadata\"             \"note\"                 ## [22] \"note_nlp\"             \"observation\"          \"observation_period\"   ## [25] \"payer_plan_period\"    \"person\"               \"procedure_occurrence\" ## [28] \"provider\"             \"specimen\"             \"visit_detail\"         ## [31] \"visit_occurrence\"     \"vocabulary\" o$concepts(\"measurement\") ## $opal_demo ##   concept_id                                       concept_name ## 1          0                                No matching concept ## 2    1175625                            Breath rate spontaneous ## 3    3000067 Parathyrin.intact [Mass/volume] in Serum or Plasma ## 4    3000068                      oxyCODONE [Presence] in Urine ## 5    3000099  Nuclear Ab [Units/volume] in Serum by Immunoassay ##  [ reached 'max' / getOption(\"max.print\") -- omitted 348 rows ] o$columns(\"measurement\") ## $opal_demo ##  [1] \"measurement_id\"                \"person_id\"                     ##  [3] \"measurement_concept_id\"        \"measurement_date\"              ##  [5] \"measurement_datetime\"          \"measurement_time\"              ##  [7] \"measurement_type_concept_id\"   \"operator_concept_id\"           ##  [9] \"value_as_number\"               \"value_as_concept_id\"           ## [11] \"unit_concept_id\"               \"range_low\"                     ## [13] \"range_high\"                    \"provider_id\"                   ## [15] \"visit_occurrence_id\"           \"visit_detail_id\"               ## [17] \"measurement_source_value\"      \"measurement_source_concept_id\" ## [19] \"unit_source_value\"             \"value_source_value\" o$get(table = \"measurement\",  # The table we want to retrieve       symbol = \"my_table\",  # The name of the symbol that will store the table       conceptFilter = 3010421,  # The concept we are interested in       columnFilter = c(\"measurement_date\", \"value_as_concept_id\"),  # The only columns we want to retrieve       dropNA = FALSE  # Whether we want to drop empty columns or not )  ds.summary(\"my_table\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 78 ##  ## $opal_demo$`number of columns` ## [1] 3 ##  ## $opal_demo$`variables held` ## [1] \"person_id\"                       \"ph_of_blood.measurement_date\"    ## [3] \"ph_of_blood.value_as_concept_id\""},{"path":"/articles/02_tables.html","id":"selecting-a-merge-column","dir":"Articles","previous_headings":"2.2 Using the get method","what":"2.2.2 Selecting a merge column","title":"2. Retrieving tables from the database","text":"retrieving table, possible specify column used merge table another table. done using mergeColumn argument. example, retrieving Visit_detail table, can specify column visit_occurrence_id used merge table Visit_occurrence table, perform reshaping operation make merge possible. example, retrieve Visit_detail table related concept ID 4149943 (corresponds Cardiac intensive care unit, meaning interested retrieving visits unit): mergeColumn specified, get method assume person_id default merge column, common column used merge tables OMOP CDM database.","code":"o$get(table = \"visit_detail\",       conceptFilter = 4149943,  # `Cardiac intensive care unit`       columnFilter = c(\"visit_detail_start_date\", \"visit_detail_end_date\"),       mergeColumn = \"visit_occurrence_id\")  ds.summary(\"visit_detail\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 39 ##  ## $opal_demo$`number of columns` ## [1] 4 ##  ## $opal_demo$`variables held` ## [1] \"visit_occurrence_id\"                                 ## [2] \"cardiac_intensive_care_unit.person_id\"               ## [3] \"cardiac_intensive_care_unit.visit_detail_start_date\" ## [4] \"cardiac_intensive_care_unit.visit_detail_end_date\""},{"path":"/articles/02_tables.html","id":"filtering-by-person-ids","dir":"Articles","previous_headings":"2.2 Using the get method","what":"2.2.3 Filtering by person IDs","title":"2. Retrieving tables from the database","text":"personFilter argument allows retrieval data specific subset person IDs. can useful working large dataset needing retrieve data specific group individuals. use personFilter parameter, specify symbol another table already exists R environment. referenced table contain person_id values may represent subset person_id values table aim retrieve. applying parameter, retrieval process filters target table include records corresponding person_id values present referenced table, thereby excluding records associated person_id values contained referenced table. Utilizing subsetting functions provided dsBaseClient package can significantly enhance versatility filtering database records based cohorts, conditions, characteristics defining subset individuals. Furthermore, dsOMOP package implements disclosure control process prevents retrieval tables containing information number patients predefined threshold set server’s configuration. ensures security confidentiality data times. Let’s perform simple example illustrate potential feature. Suppose , case, interested analyzing data patients records condition Chest pain (Concept ID 77670 Condition_occurrence). can save information specific symbol pass personFilter argument get method Person table: stored measurements chest_pain_condition symbol. Now can use table (referenced chest_pain_condition symbol) filter Person table retrieve data related patients: Now subset Person table contains data related patients records condition Chest pain, stored person_with_chest_pain symbol. can pass personFilter argument get method third table retrieve data related patients. example, can retrieve Observation table using person_with_chest_pain symbol personFilter, retrieve data related patients present person_with_chest_pain symbol: Observation table retrieved contains observation records related patients records condition Chest pain. way, can easily filter data interested work subset data relevant study. can also done cohorts, conditions, characteristics define subset individuals. done query time, makes data retrieval efficient. next article, see use dsBaseClient package combine data retrieved create combined dataset can used analysis.","code":"o$get(table = \"condition_occurrence\",       conceptFilter = 77670,  # `Chest pain`       columnFilter = \"condition_start_date\",       symbol = \"chest_pain_condition\")  ds.summary(\"chest_pain_condition\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 4 ##  ## $opal_demo$`number of columns` ## [1] 2 ##  ## $opal_demo$`variables held` ## [1] \"person_id\"                       \"chest_pain.condition_start_date\" o$get(table = \"person\",       symbol = \"person_with_chest_pain\",  # The name of the symbol that will store the table       personFilter = \"chest_pain_condition\")  # The symbol that contains the only person IDs to be retrieved o$get(table = \"observation\",       symbol = \"observation_from_person_with_chest_pain\",       columnFilter = \"observation_date\",       personFilter = \"person_with_chest_pain\")  ds.summary(\"observation_from_person_with_chest_pain\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 4 ##  ## $opal_demo$`number of columns` ## [1] 15 ##  ## $opal_demo$`variables held` ##  [1] \"person_id\"                                            ##  [2] \"primary_insurance.observation_date\"                   ##  [3] \"preferred_language.observation_date\"                  ##  [4] \"cost_containment.observation_date\"                    ##  [5] \"pain_severity_reported.observation_date\"              ##  [6] \"acceptable_pain_level_status.observation_date\"        ##  [7] \"indicators_of_pain_or_possible_pain.observation_date\" ##  [8] \"body_temperature_measurement_site.observation_date\"   ##  [9] \"pain_management_specialty.observation_date\"           ## [10] \"bowel_sounds.observation_date\"                        ##  [ reached getOption(\"max.print\") -- omitted 5 entries ]"},{"path":"/articles/03_integration.html","id":"merging-tables","dir":"Articles","previous_headings":"","what":"3.1 Merging tables","title":"3. Workflow integration","text":"section, demonstrate combine Person table Measurement table. process involves retrieving necessary data tables merging based common identifier. First, retrieve Person table: , retrieve Measurement table: can now merge two tables based person_id column, using conventional ds.merge command, adheres DataSHIELD’s data disclosure rules: can see merged table includes columns Person Measurement tables: can merge tables DataSHIELD. also merge tables repeating process additional tables combined table.","code":"o$get(\"person\") ds.summary(\"person\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 100 ##  ## $opal_demo$`number of columns` ## [1] 11 ##  ## $opal_demo$`variables held` ##  [1] \"person_id\"            \"gender_concept_id\"    \"year_of_birth\"        ##  [4] \"month_of_birth\"       \"day_of_birth\"         \"birth_datetime\"       ##  [7] \"race_concept_id\"      \"ethnicity_concept_id\" \"location_id\"          ## [10] \"provider_id\"          \"care_site_id\" o$get(\"measurement\",       columnFilter = c(\"value_as_number\", \"measurement_date\"),       conceptFilter = c(3000099))  ds.summary(\"measurement\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 11 ##  ## $opal_demo$`number of columns` ## [1] 3 ##  ## $opal_demo$`variables held` ## [1] \"person_id\"                                                        ## [2] \"nuclear_ab_units_volume_in_serum_by_immunoassay.measurement_date\" ## [3] \"nuclear_ab_units_volume_in_serum_by_immunoassay.value_as_number\" ds.merge(   x.name = \"person\",   y.name = \"measurement\",   by.x.names = \"person_id\",   by.y.names = \"person_id\",   all.x = TRUE,   all.y = FALSE,   sort = FALSE,   suffixes = c(\".x\", \".y\"),   no.dups = TRUE,   newobj = \"merged\",   datasources = conns ) ## $is.object.created ## [1] \"A data object <merged> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<merged> appears valid in all sources\" ds.summary(\"merged\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 100 ##  ## $opal_demo$`number of columns` ## [1] 13 ##  ## $opal_demo$`variables held` ##  [1] \"person_id\"                                                        ##  [2] \"gender_concept_id\"                                                ##  [3] \"year_of_birth\"                                                    ##  [4] \"month_of_birth\"                                                   ##  [5] \"day_of_birth\"                                                     ##  [6] \"birth_datetime\"                                                   ##  [7] \"race_concept_id\"                                                  ##  [8] \"ethnicity_concept_id\"                                             ##  [9] \"location_id\"                                                      ## [10] \"provider_id\"                                                      ## [11] \"care_site_id\"                                                     ## [12] \"nuclear_ab_units_volume_in_serum_by_immunoassay.measurement_date\" ## [13] \"nuclear_ab_units_volume_in_serum_by_immunoassay.value_as_number\""},{"path":"/articles/03_integration.html","id":"auxiliar-functions-and-packages","dir":"Articles","previous_headings":"3.1 Merging tables","what":"3.1.1 Auxiliar functions and packages","title":"3. Workflow integration","text":"Given complexity previous example, recommended use develop auxiliary packages encapsulate automate interaction dsOMOPClient, acts interface database data, meet research needs specific case. can see example dsOMOPHelper package can automatically join multiple tables batch desired concepts using auto function: precisely encourage community develop packages top dsOMOPClient. creating custom packages, researchers developers can tailor functionality meet specific needs projects, enhancing efficiency effectiveness analyses. information dsOMOPHelper can streamline process working OMOP CDM databases DataSHIELD, please visit GitHub repository.","code":"library(dsOMOPHelper)  h <- ds.omop.helper(connections = conns,                     resource = \"omop_demo.mimiciv\",                     symbol = \"automatic_table\")  h$auto(tables = c(\"measurement\", \"condition_occurrence\"),        columns = c(\"date\", \"start_date\"),        concepts = c(3000099, 77670))  ds.summary(\"automatic_table\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 100 ##  ## $opal_demo$`number of columns` ## [1] 7 ##  ## $opal_demo$`variables held` ## [1] \"person_id\"                                                        ## [2] \"gender_concept_id\"                                                ## [3] \"year_of_birth\"                                                    ## [4] \"race_concept_id\"                                                  ## [5] \"ethnicity_concept_id\"                                             ## [6] \"nuclear_ab_units_volume_in_serum_by_immunoassay.measurement_date\" ## [7] \"chest_pain.condition_start_date\""},{"path":"/articles/03_integration.html","id":"subsetting-tables","dir":"Articles","previous_headings":"","what":"3.2 Subsetting tables","title":"3. Workflow integration","text":"Another fundamental operation data selection dataset construction fits specific research needs DataSHIELD ds.dataFrameSubset operation dsBaseClient package. Let’s see simple example can filter, using subset operation, dataset include female individuals. First, take Person table, contains gender_concept_id, verify column includes values female male. point , work standard DataSHIELD procedures filter data. First, create gender_filter object contains value female: , use ds.dataFrameSubset function apply gender_filter gender_concept_id column Person table: Thus, can verify resulting table person_female contains individuals gender_concept_id value female: person_female subset obtained, can pass personFilter parameter get function retrieve another table, case, Measurement. resulting table contain measurements individuals gender_concept_id value female: can now merge person_female measurement_female tables based person_id column: can see merged table includes columns Person Measurement tables, individuals gender_concept_id value female: can use DataSHIELD’s standard methods subset tables obtained OMOP CDM databases. can achieve complex filters applying sophisticated ds.dataFrameSubset logics propagating desired tables personFilter parameter get method.","code":"o$get(\"person\") ds.summary(\"person$gender_concept_id\") ## $opal_demo ## $opal_demo$class ## [1] \"factor\" ##  ## $opal_demo$length ## [1] 100 ##  ## $opal_demo$categories ## [1] \"female\" \"male\"   ##  ## $opal_demo$`count of 'female'` ## [1] 43 ##  ## $opal_demo$`count of 'male'` ## [1] 57 ds.make(newobj = \"gender_filter\", toAssign = \"c('female')\") ## $is.object.created ## [1] \"A data object <gender_filter> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<gender_filter> appears valid in all sources\" ds.dataFrameSubset(   df.name = \"person\",   V1.name = \"person$gender_concept_id\",   V2.name = \"gender_filter\",   Boolean.operator = \"==\",   newobj = \"person_female\",   datasources = conns,   notify.of.progress = FALSE ) ## $is.object.created ## [1] \"A data object <person_female> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<person_female> appears valid in all sources\" ds.summary(\"person_female$gender_concept_id\") ## $opal_demo ## $opal_demo$class ## [1] \"factor\" ##  ## $opal_demo$length ## [1] 43 ##  ## $opal_demo$categories ## [1] \"female\" \"male\"   ##  ## $opal_demo$`count of 'female'` ## [1] 43 ##  ## $opal_demo$`count of 'male'` ## [1] 0 o$get(table = \"measurement\",       symbol = \"measurement_female\",       columnFilter = c(\"value_as_number\", \"measurement_date\"),       conceptFilter = c(3000099),       personFilter = \"person_female\")  ds.summary(\"measurement_female\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 7 ##  ## $opal_demo$`number of columns` ## [1] 3 ##  ## $opal_demo$`variables held` ## [1] \"person_id\"                                                        ## [2] \"nuclear_ab_units_volume_in_serum_by_immunoassay.measurement_date\" ## [3] \"nuclear_ab_units_volume_in_serum_by_immunoassay.value_as_number\" ds.merge(   x.name = \"person_female\",   y.name = \"measurement_female\",   by.x.names = \"person_id\",   by.y.names = \"person_id\",   all.x = TRUE,   all.y = FALSE,   sort = FALSE,   suffixes = c(\".x\", \".y\"),   no.dups = TRUE,   newobj = \"merged_female\",   datasources = conns ) ## $is.object.created ## [1] \"A data object <merged_female> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<merged_female> appears valid in all sources\" ds.summary(\"merged_female\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 43 ##  ## $opal_demo$`number of columns` ## [1] 13 ##  ## $opal_demo$`variables held` ##  [1] \"person_id\"                                                        ##  [2] \"gender_concept_id\"                                                ##  [3] \"year_of_birth\"                                                    ##  [4] \"month_of_birth\"                                                   ##  [5] \"day_of_birth\"                                                     ##  [6] \"birth_datetime\"                                                   ##  [7] \"race_concept_id\"                                                  ##  [8] \"ethnicity_concept_id\"                                             ##  [9] \"location_id\"                                                      ## [10] \"provider_id\"                                                      ## [11] \"care_site_id\"                                                     ## [12] \"nuclear_ab_units_volume_in_serum_by_immunoassay.measurement_date\" ## [13] \"nuclear_ab_units_volume_in_serum_by_immunoassay.value_as_number\" ds.summary(\"merged_female$gender_concept_id\") ## $opal_demo ## $opal_demo$class ## [1] \"factor\" ##  ## $opal_demo$length ## [1] 43 ##  ## $opal_demo$categories ## [1] \"female\" \"male\"   ##  ## $opal_demo$`count of 'female'` ## [1] 43 ##  ## $opal_demo$`count of 'male'` ## [1] 0"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Sarrat González. Author, maintainer. Xavier Escribà-Montagut. Author. Juan R González. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sarrat González D, Escribà-Montagut X, González J (2024). dsOMOPClient: Client-Side DataSHIELD Integration OMOP CDM Databases. R package version 1.0.0.","code":"@Manual{,   title = {dsOMOPClient: Client-Side DataSHIELD Integration for OMOP CDM Databases},   author = {David {Sarrat González} and Xavier Escribà-Montagut and Juan R González},   year = {2024},   note = {R package version 1.0.0}, }"},{"path":[]},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Client-Side DataSHIELD Integration for OMOP CDM Databases","text":"dsOMOP package designed facilitate interaction remote databases formatted Observational Medical Outcomes Partnership (OMOP) Common Data Model (CDM) within DataSHIELD environment. provides suite functions allow users fetch transform data databases format intelligible usable within DataSHIELD analytical workflow. integration ensures data analysis complies DataSHIELD security model, crucial maintaining privacy security data. Key features dsOMOP package include: Data retrieval transformation: Functions fetch data OMOP CDM databases transform user-friendly table format. Compliance DataSHIELD security model: Ensures data manipulations analyses performed way adheres disclosure control measures set DataSHIELD. Support database interaction: Includes methods checking database content (table, column concept catalogs) data filtering based user-defined criteria. enables researchers tailor data queries specific research needs.","code":""},{"path":"/index.html","id":"structure","dir":"","previous_headings":"","what":"Structure","title":"Client-Side DataSHIELD Integration for OMOP CDM Databases","text":"dsOMOP ecosystem comprises two essential components designed work tandem: server-side package (dsOMOP) client-side package (dsOMOPClient). component plays pivotal role integration OMOP CDM databases within DataSHIELD environment. comprehensive details installation, setup, usage, please refer respective repositories: Server-Side package dsOMOP: component installed DataSHIELD server responsible direct interactions OMOP CDM databases. retrieves, transforms, returns data format compatible DataSHIELD’s analytical tools. code, installation instructions, , visit https://github.com/isglobal-brge/dsOMOP. Client-Side package dsOMOPClient: Utilized researchers data analysts, package facilitates communication dsOMOP package server. sends data requests receives processed data analysis, ensuring user-friendly experience specifying data needs analysis parameters. code, installation instructions, , visit https://github.com/isglobal-brge/dsOMOPClient.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Client-Side DataSHIELD Integration for OMOP CDM Databases","text":"install client-side package dsOMOPClient, follow steps . guide assumes R installed system necessary permissions install R packages. dsOMOPClient package can installed directly GitHub using devtools package. devtools installed, can install using following command R: can install dsOMOPClient package using following command R: package installed, can load R environment using following command:","code":"install.packages(\"devtools\") devtools::install_github('isglobal-brge/dsOMOPClient') library(dsOMOPClient)"},{"path":"/index.html","id":"community-development-and-extensions","dir":"","previous_headings":"","what":"Community development and extensions","title":"Client-Side DataSHIELD Integration for OMOP CDM Databases","text":"dsOMOPClient package serves gateway interacting databases OMOP CDM format, enabling fetching tables integrated DataSHIELD workflow. integration adheres privacy standards disclosure control mechanisms inherent DataSHIELD software, ensuring subsequent data manipulation analysis operations secure. dsOMOPClient acts interface, potential automation streamlining processes creation supplementary functions, scripts, packages vast. strongly encourage community develop tools build upon dsOMOPClient, tailoring specific use cases research needs. community-driven development enhances utility dsOMOPClient also fosters collaborative ecosystem around combined use DataSHIELD OMOP CDM.  example approach dsOMOPHelper, complementary package developed alongside dsOMOPClient. dsOMOPHelper illustrates process can simplified combining commands dsOMOPClient dsBaseClient (invokes standard DataSHIELD workflow operations). package significantly reduces complexity using dsOMOPClient simple use cases, data OMOP CDM database may used epidemiological studies within DataSHIELD environment. can read dsOMOPHelper functionalities visiting GitHub repository: https://github.com/isglobal-brge/dsOMOPHelper.","code":""},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Client-Side DataSHIELD Integration for OMOP CDM Databases","text":"development dsOMOP supported RadGen4COPD, P4COPD, CADSET, DATOS-CAT projects. collaborations provided essential financial backing also affirmed project’s relevance application significant research endeavors. project received funding Spanish Ministry Science Innovation State Research Agency “Centro de Excelencia Severo Ochoa 2019-2023” Program [CEX2018-000806-S] State Research Agency Fondo Europeo de Desarrollo Regional, UE (PID2021-122855OB-I00), support Generalitat de Catalunya CERCA Program Ministry Research Universities (2021 SGR 01563). project received funding “Complementary Plan Biotechnology Applied Health”, coordinated Institut de Bioenginyeria de Catalunya (IBEC) within framework Recovery, Transformation, Resilience Plan (C17.I1) - Funded European Union - NextGenerationEU. Special thanks Xavier Escribà-Montagut invaluable support development process.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Client-Side DataSHIELD Integration for OMOP CDM Databases","text":"information inquiries, please contact: Juan R González: juanr.gonzalez@isglobal.org David Sarrat González: david.sarrat@isglobal.org details DataSHIELD, visit https://www.datashield.org. information Barcelona Institute Global Health (ISGlobal), visit https://www.isglobal.org.","code":""},{"path":"/reference/OMOPCDMDatabase-assignResource.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign the OMOP CDM database resource to a DataSHIELD environment — OMOPCDMDatabase-assignResource","title":"Assign the OMOP CDM database resource to a DataSHIELD environment — OMOPCDMDatabase-assignResource","text":"function assigns resource OMOP CDM database connection DataSHIELD environment, facilitating connection database server side.","code":""},{"path":"/reference/OMOPCDMDatabase-assignResource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign the OMOP CDM database resource to a DataSHIELD environment — OMOPCDMDatabase-assignResource","text":"symbol character string representing symbol resource assigned.","code":""},{"path":"/reference/OMOPCDMDatabase-checkConnection.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Database Connection — OMOPCDMDatabase-checkConnection","title":"Check Database Connection — OMOPCDMDatabase-checkConnection","text":"function checks OMOPCDMDatabase object points valid connection OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMDatabase-checkConnection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Database Connection — OMOPCDMDatabase-checkConnection","text":"boolean value indicating whether connection database valid (TRUE). Otherwise, error raised.","code":""},{"path":"/reference/OMOPCDMDatabase-checkPrivacyControlLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Privacy Control Level — OMOPCDMDatabase-checkPrivacyControlLevel","title":"Check Privacy Control Level — OMOPCDMDatabase-checkPrivacyControlLevel","text":"function checks privacy control level settings server configuration allow use dsOMOP operations.","code":""},{"path":"/reference/OMOPCDMDatabase-checkPrivacyControlLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Privacy Control Level — OMOPCDMDatabase-checkPrivacyControlLevel","text":"list warnings server privacy control level may permissive enough. element list named server contains warning message.","code":""},{"path":"/reference/OMOPCDMDatabase-columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Columns Catalog — OMOPCDMDatabase-columns","title":"Get Columns Catalog — OMOPCDMDatabase-columns","text":"function returns list available columns specified table OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMDatabase-columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Columns Catalog — OMOPCDMDatabase-columns","text":"table name table retrieve columns catalog. dropNA boolean indicating whether skip empty columns.","code":""},{"path":"/reference/OMOPCDMDatabase-columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Columns Catalog — OMOPCDMDatabase-columns","text":"list column names available specified table OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMDatabase-concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Concepts Catalog — OMOPCDMDatabase-concepts","title":"Get Concepts Catalog — OMOPCDMDatabase-concepts","text":"function returns data frame available concept IDs names specified table OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMDatabase-concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Concepts Catalog — OMOPCDMDatabase-concepts","text":"table name table retrieve concepts catalog.","code":""},{"path":"/reference/OMOPCDMDatabase-concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Concepts Catalog — OMOPCDMDatabase-concepts","text":"data frame containing concept_id concept_name columns representing available concepts specified table OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMDatabase-get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Table from OMOP CDM Database — OMOPCDMDatabase-get","title":"Get Table from OMOP CDM Database — OMOPCDMDatabase-get","text":"function assigns specified table name (string) OMOP CDM database DataSHIELD environment. user can specify symbol (string) table assignment DataSHIELD environment, vector concept IDs (numeric) filter dealing table categorized concept IDs, vector column names (strings) table filter (.e., select), name symbol (string) environment table obtain person IDs (unique values person_id), name column (string) perform merging operations database tables. specified, \"person_id\" column assumed merging column. user also provided option drop empty columns.","code":""},{"path":"/reference/OMOPCDMDatabase-get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Table from OMOP CDM Database — OMOPCDMDatabase-get","text":"table string specifying name table assigned. symbol string specifying symbol table assignment DataSHIELD environment. conceptFilter numeric vector specifying concept IDs filter table . columnFilter string vector specifying column names filter (select) table. personFilter string specifying symbol environment table obtain person IDs. mergeColumn string specifying column name merging operations tables. Defaults \"person_id\" specified. dropNA boolean indicating whether drop empty columns. Defaults FALSE. wideLongitudinal boolean indicating whether reshape table wide format numerically suffixed columns contains longitudinal data. Defaults FALSE.","code":""},{"path":"/reference/OMOPCDMDatabase-removeResource.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the OMOP CDM database resource from a DataSHIELD environment — OMOPCDMDatabase-removeResource","title":"Remove the OMOP CDM database resource from a DataSHIELD environment — OMOPCDMDatabase-removeResource","text":"function removes resource OMOP CDM database connection DataSHIELD environment. commonly used performed operations related connection database.","code":""},{"path":"/reference/OMOPCDMDatabase-tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Tables Catalog — OMOPCDMDatabase-tables","title":"Get Tables Catalog — OMOPCDMDatabase-tables","text":"function returns list available tables OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMDatabase-tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Tables Catalog — OMOPCDMDatabase-tables","text":"list table names available OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMDatabase.html","id":null,"dir":"Reference","previous_headings":"","what":"OMOP CDM Database class — OMOPCDMDatabase","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"class represents connection OMOP CDM database, providing various methods user interact database. allows retrieval tables well fetching catalogs available data within database.","code":""},{"path":[]},{"path":"/reference/OMOPCDMDatabase.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"OMOPCDMDatabase$new() OMOPCDMDatabase$assignResource() OMOPCDMDatabase$removeResource() OMOPCDMDatabase$get() OMOPCDMDatabase$tables() OMOPCDMDatabase$columns() OMOPCDMDatabase$concepts() OMOPCDMDatabase$checkConnection() OMOPCDMDatabase$checkPrivacyControlLevel() OMOPCDMDatabase$clone()","code":""},{"path":"/reference/OMOPCDMDatabase.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"method initializes new instance OMOPCDMDatabase class. sets connection OMOP CDM database given provided DataSHIELD connection object OMOP CDM database resource identifier.","code":""},{"path":"/reference/OMOPCDMDatabase.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"","code":"OMOPCDMDatabase$new(connections, resource)"},{"path":"/reference/OMOPCDMDatabase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"connections Connection object DataSHIELD server. resource Either identifier named list identifiers specific resource(s) within DataSHIELD server(s). named list, name resource identifier correspond server name connections.","code":""},{"path":"/reference/OMOPCDMDatabase.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"new instance OMOPCDMDatabase class.","code":""},{"path":[]},{"path":"/reference/OMOPCDMDatabase.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"","code":"OMOPCDMDatabase$assignResource(symbol)"},{"path":[]},{"path":"/reference/OMOPCDMDatabase.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"","code":"OMOPCDMDatabase$removeResource()"},{"path":[]},{"path":"/reference/OMOPCDMDatabase.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"","code":"OMOPCDMDatabase$get(   table,   symbol = NULL,   conceptFilter = NULL,   columnFilter = NULL,   personFilter = NULL,   mergeColumn = NULL,   dropNA = FALSE,   wideLongitudinal = FALSE )"},{"path":[]},{"path":"/reference/OMOPCDMDatabase.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"","code":"OMOPCDMDatabase$tables()"},{"path":[]},{"path":"/reference/OMOPCDMDatabase.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"","code":"OMOPCDMDatabase$columns(table, dropNA = FALSE)"},{"path":[]},{"path":"/reference/OMOPCDMDatabase.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"","code":"OMOPCDMDatabase$concepts(table)"},{"path":[]},{"path":"/reference/OMOPCDMDatabase.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"","code":"OMOPCDMDatabase$checkConnection()"},{"path":[]},{"path":"/reference/OMOPCDMDatabase.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"","code":"OMOPCDMDatabase$checkPrivacyControlLevel()"},{"path":"/reference/OMOPCDMDatabase.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"objects class cloneable method.","code":""},{"path":"/reference/OMOPCDMDatabase.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"","code":"OMOPCDMDatabase$clone(deep = FALSE)"},{"path":"/reference/OMOPCDMDatabase.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"OMOP CDM Database class — OMOPCDMDatabase","text":"deep Whether make deep clone.","code":""},{"path":"/reference/ds.omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory function for OMOP CDM Database — ds.omop","title":"Factory function for OMOP CDM Database — ds.omop","text":"function creates new instance OMOPCDMDatabase class, allowing interaction OMOP CDM database.","code":""},{"path":"/reference/ds.omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory function for OMOP CDM Database — ds.omop","text":"","code":"ds.omop(connections, resource)"},{"path":"/reference/ds.omop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory function for OMOP CDM Database — ds.omop","text":"connections Connection object DataSHIELD server. resource Identifier specific resource within DataSHIELD server.","code":""},{"path":"/reference/ds.omop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory function for OMOP CDM Database — ds.omop","text":"new instance OMOPCDMDatabase class.","code":""},{"path":"/reference/generateResourceSymbol.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Unique Resource Symbol for an OMOP CDM Database Resource — generateResourceSymbol","title":"Generate a Unique Resource Symbol for an OMOP CDM Database Resource — generateResourceSymbol","text":"function generates unique symbol name connection resource OMOP CDM database. generated symbol stored OMOPCDMDatabase object. includes random string prevent overwriting objects DataSHIELD environment user working.","code":""},{"path":"/reference/generateResourceSymbol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Unique Resource Symbol for an OMOP CDM Database Resource — generateResourceSymbol","text":"","code":"generateResourceSymbol(resource)"},{"path":"/reference/generateResourceSymbol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Unique Resource Symbol for an OMOP CDM Database Resource — generateResourceSymbol","text":"resource character string representing resource symbol generated.","code":""},{"path":"/reference/generateResourceSymbol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Unique Resource Symbol for an OMOP CDM Database Resource — generateResourceSymbol","text":"character string representing unique symbol resource.","code":""},{"path":"/reference/getTableCall.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the Call for Table Assignment — getTableCall","title":"Construct the Call for Table Assignment — getTableCall","text":"function assists constructing call sent DataSHIELD client server perform assignment table OMOP CDM database based parameters specified user.","code":""},{"path":"/reference/getTableCall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the Call for Table Assignment — getTableCall","text":"","code":"getTableCall(   resource,   table,   conceptFilter = NULL,   columnFilter = NULL,   personFilter = NULL,   mergeColumn = NULL,   dropNA = FALSE,   wideLongitudinal = FALSE )"},{"path":"/reference/getTableCall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the Call for Table Assignment — getTableCall","text":"resource resource symbol representing connection OMOP CDM database. table string specifying name table assigned. conceptFilter numeric vector specifying concept IDs filter table . columnFilter string vector specifying column names filter (select) table. personFilter string specifying symbol environment table obtain person IDs. mergeColumn string specifying column name merging operations tables. Defaults \"person_id\" specified. dropNA boolean indicating whether drop empty columns. Defaults FALSE. wideLongitudinal boolean indicating whether reshape table wide format numerically suffixed columns contains longitudinal data. Defaults FALSE.","code":""},{"path":"/reference/getTableCall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the Call for Table Assignment — getTableCall","text":"string representing call executed DataSHIELD server table assignment.","code":""}]
